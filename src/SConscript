# -*- coding: utf-8 -*-
# autobio AMonitor building script
#

import time
Import('genv')

build_date_time = time.strftime("%Y-%m-%d %H:%M:%S")

env = Environment()
env["CC"] = genv["CC"]
env["CXX"] = genv["CXX"]
env["AS"] = genv["AS"]
env["AR"] = genv["AR"]
env["LINK"] = genv["LINK"]
env["OBJCOPY"] = genv["OBJCOPY"]
env["NM"] = genv["NM"]
env["ENV"] = genv["ENV"]

env["CFLAGS"] += [
]

env["LIBPATH"] = [
    genv["out"],
]

env["CCFLAGS"] = [
    "-O3",
    "-g",
    "-fpermissive",
    "-Wno-unused-value",
    "-Wno-unused-parameter",
]

env["LINKFLAGS"] = [
    "-Wl,--gc-sections,-Map=amonitor.map,-cref",
]

if genv["BUILD_MODE"] == "release":
    env["CCFLAGS"] += ["-DMOD_BUILD_TIMESTAMP=\\\""+build_date_time+"\\\""]

dst = "amonitor" + genv["PROG_SUFFIX"]

inc = [
    ".",
]

src = env.Glob("*.cpp")

lib = [
    "pthread",
    "stdc++",
    "dl",
]

prog = env.Program(target=dst, source=src, LIBS=lib, CPPPATH=inc)

mod_script = "mod/SConscript"
mod_files = genv.SConscript(mod_script)

prog_files = [prog]
prog_files += mod_files

Return("prog_files")
